{"version":3,"sources":["components/BurgerMenu/BurgerMenu.js","components/PageHeader/PageHeader.js","App.js","serviceWorker.js","index.js"],"names":["props","useState","isActive","setActive","className","onClick","onChange","useStyles","makeStyles","theme","links","backgroundColor","palette","primary","main","breakpoints","down","fontSize","typography","h4","isNavOpen","openNav","classes","useTheme","isMobile","useMediaQuery","AppBar","position","Toolbar","Link","color","href","underline","variant","createMuiTheme","type","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2VAGe,G,MAAA,SAACA,GAAW,IAAD,EACMC,oBAAS,GADf,mBACjBC,EADiB,KACPC,EADO,KAQxB,OACE,0BAAMC,UAAS,UAAKJ,EAAMI,UAAX,uBAAmCF,EAAW,SAAW,IAAMG,QAN7D,WACjBL,EAAMM,SAASJ,GACfC,GAAWD,KAKT,4BACA,4BACA,+BCVAK,G,MAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,MAAQ,CACNC,gBAAiBF,EAAMG,QAAQC,QAAQC,KACvC,MAAM,eACHL,EAAMM,YAAYC,KAAK,MAAQ,CAC9BC,SAAUR,EAAMS,WAAWC,GAAGF,iBAMvB,aAAO,IAAD,EACUhB,oBAAS,GADnB,mBACZmB,EADY,KACDC,EADC,KAEbC,EAAUf,IACVE,EAAQc,cACRC,EAAWC,YAAchB,EAAMM,YAAYC,KAAK,OAMtD,OACE,kBAACU,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,yBAAKxB,UAAS,kBAAaoB,EAAW,SAAW,KAC/C,yBAAKpB,UAAU,QACb,kBAACyB,EAAA,EAAD,CAAMC,MAAM,UAAUC,KAAK,KAA3B,kBAEE,6BAFF,SAMA,wBAAI3B,UAAS,gBAAWkB,EAAQZ,MAAnB,YAA4BU,EAAY,OAAS,SAAjD,cACX,4BAAI,kBAACS,EAAA,EAAD,CAAMG,UAAU,OAAOF,MAAM,UAAUC,KAAK,IAAIE,QAAQ,SAAxD,WAER,kBAAC,EAAD,CAAY7B,UAAU,OAAOE,SAlBnB,WAChBe,GAASD,U,gBChBPX,EAAQyB,YAAe,CAC3BtB,QAAS,CACPuB,KAAM,UAaKC,EATH,WACV,OACE,kBAACC,EAAA,EAAD,CAAe5B,MAAOA,GACpB,kBAAC6B,EAAA,EAAD,MACA,kBAAC,EAAD,QCLcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3b9a6a9.chunk.js","sourcesContent":["import React, { useState} from \"react\";\nimport './BurgerMenu.css';\n\nexport default (props) => {\n  const [isActive, setActive] = useState(false);\n\n  const toggleMenu = () => {\n    props.onChange(isActive);\n    setActive(!isActive);\n  }\n\n  return (\n    <span className={`${props.className} navTrigger ${isActive ? 'active' : ''}`} onClick={toggleMenu}>\n      <i></i>\n      <i></i>\n      <i></i>\n    </span>\n  );\n}","import React, { useState } from 'react';\nimport { AppBar, Toolbar, Link, makeStyles, useMediaQuery, useTheme } from '@material-ui/core';\nimport BurgerMenu from '../BurgerMenu/BurgerMenu';\nimport './PageHeader.css';\n\nconst useStyles = makeStyles(theme => ({\n  links:  {\n    backgroundColor: theme.palette.primary.main,\n    '& *': {\n      [theme.breakpoints.down('xs')]: {\n        fontSize: theme.typography.h4.fontSize\n      }\n    }\n  }\n}))\n\nexport default () => {\n  const [isNavOpen, openNav] = useState(false);\n  const classes = useStyles()\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n  const toggleNav = () => {\n    openNav(!isNavOpen)\n  }\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <nav className={`nav-bar ${isMobile ? 'mobile' : ''}`}>\n          <div className=\"logo\">\n            <Link color=\"inherit\" href=\"#\">\n              Christian Siber\n              <br/>\n              Logo\n            </Link>\n          </div>\n            <ul className={`links ${classes.links} ${isNavOpen ? 'open' : 'closed'} navlinks`}>\n              <li><Link underline=\"none\" color=\"inherit\" href=\"#\" variant=\"body1\">About</Link></li>\n            </ul>\n          <BurgerMenu className=\"menu\" onChange={toggleNav}></BurgerMenu>\n        </nav>\n      </Toolbar>\n     </AppBar>\n  )\n}","import React from 'react';\nimport './App.css';\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport PageHeader from './components/PageHeader/PageHeader';\nimport { CssBaseline } from '@material-ui/core';\nimport { createMuiTheme } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nconst App = ()  => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <PageHeader />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}